definitions:
  dto.CreateUserRequest:
    properties:
      birthday:
        type: string
      clinicName:
        type: string
      doctorID:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phoneNumber:
        type: string
      role:
        enum:
          - Doctor
          - PractitionerFull
          - PractitionerLimited
          - Patient
        type: string
    required:
      - email
      - firstName
      - lastName
      - role
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
      - email
      - password
    type: object
  shared.Pagination:
    properties:
      current:
        type: integer
      next:
        type: integer
      perPage:
        type: integer
      previous:
        type: integer
      totalItems:
        type: integer
      totalPages:
        type: integer
    type: object
  users.DoctorView:
    properties:
      doctorClinicName:
        type: string
      doctorID:
        type: string
      doctorName:
        type: string
    type: object
  users.UserList:
    properties:
      items:
        items:
          $ref: "#/definitions/users.UserView"
        type: array
      pagination:
        $ref: "#/definitions/shared.Pagination"
    type: object
  users.UserRole:
    enum:
      - Admin
      - Doctor
      - PractitionerFull
      - PractitionerLimited
      - Patient
    type: string
    x-enum-varnames:
      - Admin
      - Doctor
      - PractitionerFull
      - PractitionerLimited
      - Patient
  users.UserStatus:
    enum:
      - Decline
      - Invited
      - Active
    type: string
    x-enum-varnames:
      - Decline
      - Invited
      - Active
  users.UserView:
    properties:
      birthday:
        type: string
      createdAt:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      phoneNumber:
        type: string
      representativeSelected:
        type: boolean
      role:
        $ref: "#/definitions/users.UserRole"
      status:
        $ref: "#/definitions/users.UserStatus"
    type: object
  users.UserWithDoctorView:
    properties:
      birthday:
        type: string
      createdAt:
        type: string
      doctorInfo:
        $ref: "#/definitions/users.DoctorView"
      email:
        type: string
      emailVerified:
        type: boolean
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      phoneNumber:
        type: string
      representativeSelected:
        type: boolean
      role:
        $ref: "#/definitions/users.UserRole"
      status:
        $ref: "#/definitions/users.UserStatus"
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
        - application/json
      description:
        Authenticates a user based on email and password, and returns an
        access token.
      parameters:
        - description: Login Credentials
          in: body
          name: LoginRequest
          required: true
          schema:
            $ref: "#/definitions/dto.LoginRequest"
      produces:
        - application/json
      responses:
        "200":
          description: User successfully logged in
          schema:
            type: string
        "400":
          description: Invalid Request Schema
          schema:
            type: string
        "401":
          description: Unauthorized - User not valid or not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: User login
      tags:
        - Auth
  /auth/signup:
    post:
      consumes:
        - application/json
      description: Registers a new user with the provided details.
      parameters:
        - description: Signup Information
          in: body
          name: CreateUserRequest
          required: true
          schema:
            $ref: "#/definitions/dto.CreateUserRequest"
      produces:
        - application/json
      responses:
        "201":
          description: User successfully registered
          schema:
            type: string
        "400":
          description: Invalid Request Schema
          schema:
            type: string
        "403":
          description: Forbidden - User Not Allowed
          schema:
            type: string
        "422":
          description: Validation Error
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: User signup
      tags:
        - Auth
  /users:
    get:
      consumes:
        - application/json
      description: Retrieves a paginated list of users from the platform.
      parameters:
        - description: Name of the user to filter
          in: query
          name: name
          type: string
        - default: 10
          description: Number of users per page
          in: query
          name: perPage
          type: integer
        - default: 1
          description: Page number
          in: query
          name: page
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with user data
          schema:
            $ref: "#/definitions/users.UserList"
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Fetch the list of users
      tags:
        - Users
  /users/me:
    get:
      consumes:
        - application/json
      description:
        Retrieves detailed information about a specific user using their
        user ID.
      parameters:
        - description: User ID
          in: path
          name: userid
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with user information
          schema:
            $ref: "#/definitions/users.UserWithDoctorView"
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: User Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get user information
      tags:
        - Users
swagger: "2.0"
